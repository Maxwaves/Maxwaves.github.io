{"meta":{"title":"ArgsのBlog","subtitle":"Maxwaves","description":"Welcome to my blog","author":"Maxwaves","url":"http://example.com","root":"/"},"pages":[{"title":"友链","date":"2022-01-12T05:31:07.000Z","updated":"2022-01-12T05:31:48.743Z","comments":true,"path":"friend/index.html","permalink":"http://example.com/friend/index.html","excerpt":"","text":""},{"title":"","date":"2022-02-21T05:02:04.305Z","updated":"2022-02-21T05:02:04.303Z","comments":true,"path":"css/calendar.css","permalink":"http://example.com/css/calendar.css","excerpt":"","text":".calendar { font-family: Helvetica, arial; border: 1px solid #dddddd; border-radius: 3px; min-height: 120px; text-align: center; margin: 0 auto; border-width: 0px; width: 100%; display: flex; display: -webkit-flex; justify-content: center; align-items: center; flex-wrap: wrap; } .calendar-graph text.wday, .calendar-graph text.month { font-size: 10px; fill: #aaa; } .contrib-legend { text-align: right; padding: 0 14px 10px 0; display: inline-block; float: right; } .contrib-legend .legend { display: inline-block; list-style: none; margin: 0 5px; position: relative; bottom: -1px; padding: 0; } .contrib-legend .legend li { display: inline-block; width: 10px; height: 10px; } .text-small { font-size: 12px; color: #767676; } .calendar-graph { padding: 5px 0 0; text-align: center; } .contrib-column { text-align: center; border-left: 1px solid #ddd; border-top: 1px solid #ddd; font-size: 11px; } .contrib-column-first { border-left: 0; } .table-column { padding: 10px; display: table-cell; width: 33%; vertical-align: top; } .contrib-number { font-weight: 300; line-height: 1.3em; font-size: 24px; display: block; color: #333; } .calendar img.spinner { width: 70px; margin-top: 50px; min-height: 70px; } .monospace { text-align: center; color: #000; font-family: monospace; } .monospace a { color: #1d75ab; text-decoration: none; } .contrib-footer { font-size: 11px; padding: 0 10px 12px; text-align: left; width: 100%; box-sizing: border-box; height: 26px; } .left.text-muted { float: left; margin-left: 9px; color: #767676; } .left.text-muted a { color: #4078c0; text-decoration: none; } .left.text-muted a:hover, .monospace a:hover { text-decoration: underline; } h2.f4.text-normal.mb-3 { display: none; } .float-left.text-gray { float: left; } #user-activity-overview { display: none; } .day-tooltip { white-space: nowrap; position: absolute; z-index: 99999; padding: 10px; font-size: 12px; color: #959da5; text-align: center; background: rgba(0, 0, 0, 0.85); border-radius: 3px; display: none; pointer-events: none; } .day-tooltip strong { color: #dfe2e5; } .day-tooltip.is-visible { display: block; } .day-tooltip:after { position: absolute; bottom: -10px; left: 50%; width: 5px; height: 5px; box-sizing: border-box; margin: 0 0 0 -5px; content: \" \"; border: 5px solid transparent; border-top-color: rgba(0, 0, 0, 0.85); } .position-relative { width: 100%; margin-left: 20px; margin-right: 20px; } @media screen and (max-width: 650px) { .contrib-column { display: none; } }"},{"title":"gallery","date":"2022-01-10T11:41:48.000Z","updated":"2022-01-10T11:47:02.164Z","comments":true,"path":"Gallery/index.html","permalink":"http://example.com/Gallery/index.html","excerpt":"","text":"壁纸 收藏的一些壁纸 漫威 关于漫威的图片 OH MY GIRL 关于OH MY GIRL的图片"},{"title":"相关链接","date":"2022-01-10T11:35:24.000Z","updated":"2022-01-12T05:20:37.871Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-01-10T11:32:55.000Z","updated":"2022-01-10T11:35:03.081Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-02-21T05:02:06.799Z","updated":"2022-02-21T05:02:06.797Z","comments":true,"path":"js/calendar.js","permalink":"http://example.com/js/calendar.js","excerpt":"","text":"GitHubCalendar(\".calendar\", \"Maxwaves\"); // or enable responsive functionality GitHubCalendar(\".calendar\", \"Maxwaves\", { responsive: true });"},{"title":"","date":"2022-02-21T05:02:05.156Z","updated":"2022-02-21T05:02:05.153Z","comments":true,"path":"js/gitcalendar.js","permalink":"http://example.com/js/gitcalendar.js","excerpt":"","text":"\"use strict\"; var _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; var _typeof = \"function\" == typeof Symbol && \"symbol\" == _typeof2(Symbol.iterator) ? function (e) { return typeof e === \"undefined\" ? \"undefined\" : _typeof2(e); } : function (e) { return e && \"function\" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? \"symbol\" : typeof e === \"undefined\" ? \"undefined\" : _typeof2(e); }; !(function (e) { \"object\" === (\"undefined\" == typeof exports ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module ? (module.exports = e()) : \"function\" == typeof define && define.amd ? define([], e) : ((\"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : this ).GitHubCalendar = e()); })(function () { return (function o(s, u, i) { function c(t, e) { if (!u[t]) { if (!s[t]) { var r = \"function\" == typeof require && require; if (!e && r) return r(t, !0); if (l) return l(t, !0); var n = new Error(\"Cannot find module '\" + t + \"'\"); throw ((n.code = \"MODULE_NOT_FOUND\"), n); } var a = (u[t] = { exports: {} }); s[t][0].call( a.exports, function (e) { return c(s[t][1][e] || e); }, a, a.exports, o, s, u, i ); } return u[t].exports; } for ( var l = \"function\" == typeof require && require, e = 0; e < i.length; e++ ) { c(i[e]); } return c; })( { 1: [ function (e, t, r) { var h = e(\"github-calendar-parser\"), y = e(\"elly\"), v = e(\"add-subtract-date\"), M = e(\"formatoid\"), x = \"YYYY 年 MMM D 日\", _ = \"MMMM D\", S = [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", ]; function k(e) { return e + \" \" + (1 === e ? \"day\" : \"天\"); } t.exports = function (b, e, m) { (b = y(b)), ((m = m || {}).summary_text = m.summary_text || '数据来源 @' + e + \"\"), (m.cache = 1e3 * (m.cache || 86400)), !1 === m.global_stats && (b.style.minHeight = \"175px\"); var r = { content: \"gh_calendar_content.\" + e, expire_at: \"gh_calendar_expire.\" + e, }; (m.proxy = m.proxy || function (e) { return fetch( \"https://api.bloggify.net/gh-calendar/?username=\" + e ).then(function (e) { return e.text(); }); }), (m.getCalendar = m.getCalendar || function (e) { if ( m.cache && Date.now() < +localStorage.getItem(r.expire_at) ) { var t = localStorage.getItem(r.content); if (t) return Promise.resolve(t); } return m.proxy(e).then(function (e) { return ( m.cache && (localStorage.setItem(r.content, e), localStorage.setItem( r.expire_at, Date.now() + m.cache )), e ); }); }); return (function g() { return m .getCalendar(e) .then(function (e) { var t = document.createElement(\"div\"); t.innerHTML = e; var r, n, a, o, s, u, i, c, l, d, f, p = t.querySelector(\".js-yearly-contributions\"); y(\".position-relative h2\", p).remove(), (p.querySelector(\".float-left.text-gray\").innerHTML = m.summary_text), p.querySelector(\"include-fragment\") ? setTimeout(g, 500) : (!0 === m.responsive && ((n = (r = p.querySelector( \"svg.js-calendar-graph-svg\" )).getAttribute(\"width\")), (a = r.getAttribute(\"height\")), r.removeAttribute(\"height\"), r.setAttribute(\"width\", \"100%\"), r.setAttribute(\"viewBox\", \"0 0 \" + n + \" \" + a)), !1 !== m.global_stats && ((s = (o = h(y(\"svg\", p).outerHTML)).current_streak ? M(o.current_streak_range[0], _) + \" 日\" + \" &ndash; \" + M(o.current_streak_range[1], _) : o.last_contributed ? \"最后一次提交于\" + \" \" + M(o.last_contributed, _) + \"\" : \"Rock - Hard Place\"), (u = o.longest_streak ? M(o.longest_streak_range[0], _) + \" 日\" + \" &ndash; \" + M(o.longest_streak_range[1], _) : o.last_contributed ? \"最后一次提交于\" + \" \" + M(o.last_contributed, _) + \" \" : \"Rock - Hard Place\"), (i = y(\"\", { class: \"contrib-column contrib-column-first table-column\", html: '过去一年内提交\\n ' + o.last_year + ' 次\\n ' + M( v.add( v.subtract(new Date(), 1, \"year\"), 1, \"day\" ), x ) + \" &ndash; \" + M(new Date(), x) + \"\", })), (c = y(\"\", { class: \"contrib-column table-column\", html: '最长连续提交记录\\n ' + k(o.longest_streak) + '\\n ' + u + \" 日\", })), (l = y(\"\", { class: \"contrib-column table-column\", html: '当前提交记录\\n ' + k(o.current_streak) + '\\n ' + s + \" 日\", })), p.appendChild(i), p.appendChild(c), p.appendChild(l)), (b.innerHTML = p.innerHTML), !0 === m.tooltips && ((d = b), (f = document.createElement(\"div\")).classList.add( \"day-tooltip\" ), d.appendChild(f), d.querySelectorAll(\"rect.day\").forEach(function (e) { e.addEventListener(\"mouseenter\", function (e) { var t = e.target.getAttribute(\"data-count\"); \"0\" === t ? (t = \"No contributions\") : \"1\" === t ? (t = \"1 contribution\") : (t += \" contributions\"); var r = new Date( e.target.getAttribute(\"data-date\") ), n = S[r.getUTCMonth()] + \" \" + r.getUTCDate() + \", \" + r.getUTCFullYear(); (f.innerHTML = \"\" + t + \" on \" + n), f.classList.add(\"is-visible\"); var a = e.target.getBoundingClientRect(), o = a.left + window.pageXOffset - f.offsetWidth / 2 + a.width / 2, s = a.bottom + window.pageYOffset - f.offsetHeight - 2 * a.height; (f.style.top = s + \"px\"), (f.style.left = o + \"px\"); }), e.addEventListener(\"mouseleave\", function () { f.classList.remove(\"is-visible\"); }); }))); }) .catch(function (e) { return console.error(e); }); })(); }; }, { \"add-subtract-date\": 2, elly: 4, formatoid: 6, \"github-calendar-parser\": 8, }, ], 2: [ function (e, t, r) { function n(a) { return function e(t, r, n) { switch (((r *= a), n)) { case \"years\": case \"year\": t.setFullYear(t.getFullYear() + r); break; case \"months\": case \"month\": t.setMonth(t.getMonth() + r); break; case \"weeks\": case \"week\": return e(t, 7 * r, \"days\"); case \"days\": case \"day\": t.setDate(t.getDate() + r); break; case \"hours\": case \"hour\": t.setHours(t.getHours() + r); break; case \"minutes\": case \"minute\": t.setMinutes(t.getMinutes() + r); break; case \"seconds\": case \"second\": t.setSeconds(t.getSeconds() + r); break; case \"milliseconds\": case \"millisecond\": t.setMilliseconds(t.getMilliseconds() + r); break; default: throw new Error(\"Invalid range: \" + n); } return t; }; } t.exports = { add: n(1), subtract: n(-1) }; }, {}, ], 3: [ function (e, t, r) { (t.exports.en = [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", ]), (t.exports.en.abbr = [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", ]), (t.exports.en.short = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]), (t.exports.fr = [ \"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\", ]), (t.exports.fr.abbr = [ \"dim\", \"lun\", \"mar\", \"mer\", \"jeu\", \"ven\", \"sam\", ]), (t.exports.fr.short = [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]), (t.exports.es = [ \"domingo\", \"lunes\", \"martes\", \"miercoles\", \"jueves\", \"viernes\", \"sabado\", ]), (t.exports.es.abbr = [ \"dom\", \"lun\", \"mar\", \"mir\", \"jue\", \"vie\", \"sab\", ]), (t.exports.es.short = [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sa\"]), (t.exports.it = [ \"Domenica\", \"Lunedi\", \"Martedi\", \"Mercoledi\", \"Giovedi\", \"Venerdi\", \"Sabato\", ]), (t.exports.it.abbr = [ \"Dom\", \"Lun\", \"Mar\", \"Mer\", \"Gio\", \"Ven\", \"Sab\", ]), (t.exports.it.short = [\"D\", \"L\", \"Ma\", \"Me\", \"G\", \"V\", \"S\"]), (t.exports = [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", ]), (t.exports.abbr = [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", ]), (t.exports.short = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]); }, {}, ], 4: [ function (e, t, r) { var n = e(\"iterate-object\"), a = e(\"sliced\"); function o(r, e) { return \"string\" == typeof r ? \""},{"title":"标签","date":"2018-01-04T16:00:00.000Z","updated":"2022-01-10T09:25:18.114Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux基本命令（2）文件与查找","slug":"Linux基本命令（2）文件与查找","date":"2022-03-23T07:12:13.000Z","updated":"2022-03-23T07:16:09.108Z","comments":true,"path":"2022/03/23/Linux基本命令（2）文件与查找/","link":"","permalink":"http://example.com/2022/03/23/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%EF%BC%882%EF%BC%89%E6%96%87%E4%BB%B6%E4%B8%8E%E6%9F%A5%E6%89%BE/","excerpt":"","text":"Linux基本命令（2）文件与查找处理特殊字符：假设系统中有一个文件叫“-abc” ，如果我们想对它进行操作，例如现在要删除它，方法分 别如下： 我们可以命令行中输入rm – -abc命令来删除文件。（若直接在命令行中输入rm -abc命令，则 无效，由于文件名的第一个字符为 - ，Linux把文件名当作选项了，所以我们要使用“–”符 号来解决这个问题），其它的特殊字符也一样 文件权限若有一个文件的类型与权限数据为“-rwxr-xr–” 先将整个类型与权限数据分开查阅，并将十个字符整理成为如下所示; 12[-][rwx][r-x][r--] 1 234 567 890 1为:代表这个文件名为目录(d)或文件，本例中为文件（-) ﹔ 234为:拥有者的权限，本例中为可读、可写、可执行（rwx） ; 567为:同群组使用者权限，本例中为可读可执行（rx） ;890为:其他使用者权限，本例中为可读(r），就是只读之意. 同时注意到，rwx所在的位置是不会改变的，有该权限就会显示字 chown用法：用来更改某个目录或文件的用户名和用户组。 chown 用户名:组名 文件路径（可以是绝对路径也可以是相对路径） 例1：chown root:root /tmp/tmp1 就是把tmp下的tmp1的用户名和用户组改成root和root（只修改了tmp1的属组）。 例2：chown -R root:root /tmp/tmp1 就是把tmp下的tmp1下的所有文件的属组都改成root和root。 chmod用法：用来修改某个目录或文件的访问权限。 语法：chmod [-cfvR] [--help] [--version] [who] [+ | - | =] [mode] 文件名 例子：chmod -R 777 /home/linux find查找#find 时间，类型，名字，大小，用户，组，权限 #locate updatedb手动更新数据库 • 功能：在文件系统中查找匹配的文件 • 格式 find [&lt;起始目录&gt; …] [&lt;选项表达式&gt;] [&lt;条件匹配表达式&gt;] [&lt;动作表达式&gt;] • 说明 – &lt;起始目录&gt;：对每个指定的 &lt;起始目录&gt; 递归搜索目录树 • 省略&lt;起始目录&gt;时表示当前目录 – &lt;选项表达式&gt;：控制 find 命令的行为 – &lt;条件匹配表达式&gt;：根据匹配条件查找文件 – &lt;动作表达式&gt;：指定对查找结果的操作，默认为显示在标准输出（-print） – 不带任何参数的 find 命令将在屏幕上递归显示当前目录下的文件列表。 文件的时间戳 • GNU/Linux 文件的3种类型的时间戳： – mtime: 最后修改时间 (ls -lt) – ctime: 状态改变时间 (ls -lc) – atime: 最后访问时间 (ls -lu) • 说明 – ctime并非文件创建时间。 – 覆盖一个文件会改变mtime、ctime和atime三类时间。 – 改变文件的访问权限或拥有者会改变文件的ctime和atime。 – 读文件会改变文件的atime。 选项 说明 -L 如果遇到符号链接文件，就跟踪链接所指的文件 -regextype TYPE 指定 -regex 和 -iregex 使用的正则表达式类型，默 认为 emacs -depth/-d 查找目录自身之前先处理目录中的文件（即深度 优先） -mount/-xdev 查找文件时不跨越文件系统 -maxdepth LEVELS 设置最大的查找深度 –help 显示 find 命令帮助信息 –version 显示 find 的版本 例： • 递归显示当前目录的文件列表 $ find • 递归显示 / 目录的文件列表 $ find / • 递归显示 / 目录的文件列表（仅限于3层目录） $ find / -maxdepth 3 • 递归显示 / 目录的文件列表（仅限于 / 文件系统） $ find / -xdev • 递归显示 /home、/www、/srv 目录的文件列表 $ find /home /www /srv 条件表达式–文件名 条件 说明 -name PATTERN 匹配文件名 -iname PATTERN 匹配文件名（忽略大小写） -lname PATTERN 匹配符号链接文件名 -ilname PATTERN 匹配符号链接文件名（忽略大小写） -wholename PATTERN 匹配文件的完整路径（不把 ‘/’ 和 ‘.’ 作为特殊字符） -iwholename PATTERN 匹配文件的完整路径（忽略大小写） PATTERN 使用 Shell 的匹配模式 • 可以使用 Shell 的通配符（*、？[]） • 要用“”或‘’括起来 条件表达式–时间属性 条件 说明 -amin N 查找 N 分钟以前被访问过的所有文件 -atime N 查找 N 天以前被访问过的所有文件 -cmin N 查找 N 分钟以前文件状态被修改过的所有文件（比如权限修改） -ctime N 查找 N 天以前文件状态被修改过的所有文件 （比如权限修改） -mmin N 查找 N 分钟以前文件内容被修改过的所有文件 -mtime N 查找 N 天以前文件内容被修改过的所有文件 -used N 查找被改动过之后，在N天内被存取过的所有文件 注：以上选项中的 N 可以有三种输入方式：N,+N,-N  +20 表示大于 20 （21，22，23 等）  -20 表示小于 20 （19，18，17 等） 20 表示等于 20 例： • 在/home下查找最近2天之内改动过的文件 $ find /home -mtime -2 • 在/home下查找最近2天之内被访问过的文件 $ find /home -atime -2 • 在/home下查找60分钟之前改动过的文件 $ find /home -mmin +60 条件 说明 -newer FILE 查找所有比 FILE 的内容修改时间新的文件 -cnewer FILE 查找所有比 FILE 的状态修改时间新的文件（比如权限修改） -anewer FILE 查找所有比 FILE 的访问时间新的文件 FILE 为要比对的样板文件或目录 例： • 在/home下查找更新时间比tmp.txt新的文件或目录 $ find /home -newer tmp.txt • 在/home下查找存取时间比tmp.txt新的文件或目录 $ find /home -anewer tmp.txt 条件表达式–用户和组 条件 说明 -uid N 用户ID为N的所有文件 -gid N 组ID为N的所有文件 -user USERNAME 用户名为 USERNAME 的所有文件 -group GROUPNAME 组名为 GROUPNAME 的所有文件 -nouser 文件属于不在 /etc/passwd 文件中的用户 -nogroup 文件属于不在 /etc/group 文件中的组 N 可以使用 N,+N,-N 例： • 查找在系统中已作废用户（在/etc/passwd中无记录）的文件 $ find / -nouser • 查找属于 osmond 用户的文件 $ find / -user osmond • 查找属于 students 组的文件 $ find / -group students • 查找UID为502的所有文件 $ find / -uid 502 • 查找UID大于600的所有文件 $ find / -uid +600 • 查找GID小于60的所有文件 $ find / -gid -60 条件表达式–文件权限 条件 说明 -perm MODE 精确匹配权限模式为 MODE 的文件 -perm MODE 匹配权限模式至少为 MODE 的文件 （用户、组和其他人这三种权限必须都匹配） -perm /MODE 或 -perm +MODE 匹配权限模式至少为 MODE 的文件 （用户、组和其他人这三种权限中有一种匹配即 可） MODE 与 chown 命令的书写方式一致，既可以使用字符模式也可以 使用八进制的数值模式，通常使用八进制的数值模式 例： • 在/home目录下查找权限为700的所有文件或目录 $ find /home -perm 700 • 在/home目录下查找权限至少为740的所有文件或目录 $ find /home -perm -740 条件表达式–类型和大小 条件 说明 -type TYPE 查找类型为 TYPE 的文件，可用的类型： b-块设备文件; c-字符设备文件; d-目录文件; p-命名管道; f-普通文件; l-符号链接; s-socket 文件 -links N 查找有N个链接的文件 -inum N 查找文件inode为N的文件 -samefile NAME 查找与NAME文件具有相同inode的文件 -size N[bcwkMG] 查找文件大小为N的文件，单位可以为： b-512 字节的块（省略单位的默认值）; c-字节; w-双字节; k-Kilobytes; M-Megabytes; G-Gigabytes -empty 查找空文件（大小为0） 例： • 在/home目录下查找硬连接数大于2的文件 $find /home -links +2 • 在当前目录下查找长度大于10kB的文件 $find . -size +10k • 在/tmp目录下查找长度等于1GB的文件 $find /tmp -size 1G • 在当前目录下查找长度小于10MB的文件 $find . -size -10M find 命令–动作表达式• -print ​ – 在标准输出上列出查找结果（每行一个文件） • -ls ​ – 使用 ‘ls -dils’ 在标准输出上列出查找结果 • -prune ​ – 忽略对某个目录的查找 • -exec COMMAND {} ; ​ – 对符合查找条件的文件执行 Linux 命令 • -ok COMMAND {} ; – 对符合查找条件的文件执行 Linux 命令；与 -exec 不同 的是，它会询问用户是否需要执行 • {} 两个大括号之间不能有空格，表示查找到的对象 • ; 表示命令结束，反斜杠与前面的大括号之间必须要留空格 例： • 查找并列出当前目录下不安全的文件（世界可读写执行） $ find . -perm -007 -ls • 查找 logs 目录下的所有的 .log 文件并查看它的详细信息 $ find logs -name &quot;*.log&quot; -type f -exec ls -l &#123;&#125; \\; • 查找当天修改过的普通文件并显示出来 $ find . -type f -mtime -1 -exec ls -l &#123;&#125; \\; • 在/data/目录下查找以.sh结尾的权限模式为644的文件，并且把他们增 加为可以执行的。 $find /data –type f –perm 644 –name *.sh –ok chmod 755 &#123;&#125; \\;","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Linux常见命令","slug":"Linux常见命令","date":"2022-03-17T13:34:46.000Z","updated":"2022-03-17T13:36:10.432Z","comments":true,"path":"2022/03/17/Linux常见命令/","link":"","permalink":"http://example.com/2022/03/17/Linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/","excerpt":"","text":"Linux基本命令1.pwd：显示当前路径cd ：切换目录 用法：cdcd ../ 切换到上级目录cd / 切换到根目录cd ~ （或只有cd ）切换到当前用户主目录(home底下以用户名命名的文件夹) /root目录 mkdir 创建目录 mkdir 目录名 -p 递归创建目录 2.rmdir 删除空目录用法：rmdir 目录名也可用：rm -rf 目录名 3.ls 查看目录或文件信息主要选项：-l 列出目录或者文件的详细信息。比如权限、修改时间等等-a 列出当前目录下所有文件，包括隐藏文件（已点开头的都是隐藏文件） 4.vi 文本编辑器vim是vi的升级版,最常见的区别是能用多种颜色显示显示系统文件的一些特殊信息。 vi: Visual Interface 文本编辑器,可视化接口 vim：vi iMproved的缩写，即vi的增强版 vim编辑器分为三种主要模式： 命令模式（编辑模式）：默认模式，移动光标，剪切/粘贴文本（界面表现：左下角显示文件名或为空） 插入模式（输入模式）：修改文本（界面表现：左下角显示—INSERT–）插入模式下，按ESC按键返回命令模式 末行模式（扩展模式）：保存、退出等（界面表现：左下角显示—VISUAL–）末行模式下连续按两次ESC按键返回末行模式 Esc建Esc建：总是返回到命令模式退出编辑按ESC键不保存退出： :q!保存退出： :wq输入/，进入搜索输入:set nu，显示每一行的行数按键盘G，可以直接定位到最末尾 5.cp 复制用法：cp ［选项］文件名或目录 目标地址-R 拷贝目录及目录下所有目录和文件cp a.txt b.txt 将a文件复制，且另命名为b文件（目录名） 6.mv 移动用法：mv 文件名或目录 目标目录mv a.txt ../ 将a文件移动到上级目录（将一个文件移动到另一个目录没有重命名）mv a.txt ../b.txt 将a文件移动到上一级并改名为b文件（将一个文件移动到另一个目录并重命名） 7.rm 删除文件或目录-f 强制删除-r 删除目录常用：rm -rf 文件或目录 8.find 查找文件用法：find [路径] [选项]常用选项有：find . -name *.log 在当前目录查找以.log结尾的文件find / -name log 在根目录查找log命名的目录 9.grep 过滤在指定文件中查找字符（串）并打印该行用法：grep 字符串 文件名grep band file 在file文件中找寻band字符串 10.cat 显示文本文件内容用法：cat 文件名 cat 文件名字 11.head 查看前几行用法： head -n 5 文件名 12.tail 从指定点开始将文件写到标准输出tail -n 5 文件名 查看后几行tail -f error.log 不断刷新，看到最新内容 13.ps 查看进程（动态）-ef 显示所有运行进程，并显示启动进程的命令 14.netstat 查看网络状况 （net status的简写）netstat -apn 查看所有端口an，按一定顺序排列输出p，表示显示哪个进程在调用 15.| 管道符 （竖线，英文输入法状态下shift+键盘上的的|\\）在命令之间建立管道，将前面命令的输出作为后面命令的输入通过命令查找tomcat进程：ps -ef | grep tomcat通过命令查找到占用此端口的进程编号：netstat -apn|grep 8080 16.echo 打印文件内容或编辑文件内容常用选项有：-n 不换行输出-e 可以使用转义字符（\\n回车，\\t tab键）示例：echo “I am studying linux”&gt;&gt;xujun.txt 追加文件尾部内容echo $? 假如返回值为0的时候，表示上一次命令成功。假如是1到255的话，则是失败echo -e “wo\\tshi\\tshei”&gt; xujun.txt 17.touch 创建一个空白文件，假如当前目录有同样的文件，则会更新文件的时间戳-a 修改access（访问）时间-m 修改modify（修改）时间这两个参数了解即可 18.uname 查看系统-m 查看系统是几位操作系统-r 查看系统的内核版本-a 查看详细的系统内核版本和系统的操作系统 19.rz 上传假如系统里面没有这个命令，则使用yum install lrzsz 安装-y 覆盖直接输入rz，就可以上传文件 20.sz 下载假如系统里面没有这个命令，则使用yum install lrzsz 安装-y 覆盖sz -y test.txt 21.su 切换用户su root 从普通用户切换到root（或直接su） root状态切换其他用户直接su 用户名 22.history 查看命令历史记录23.chmod 权限赋予命令-R 递归改变目录下所有子目录和文件的权限数字方式：r=4 w=2 x=1 chmod 777 lemon 24.tar 解压，压缩tar.gztar -czvf test.tar.gz test 将test文件夹压缩成test.tar.gz tar -xzvf test.tar.gz 将test.tar.gz解压得到test文件夹 25.zip 解压，压缩zip zip –r test.zip test 将test文件夹压缩成test.zip，必须带r 才会把文件压缩进去，不然会生成一个空的文件夹 unzip test.zip 将test.zip文件夹解压 26.关闭防火墙开启：service iptables start关闭：service iptables stop 27. 从尾到头查看文件tac 28.shutdown 关机 永久关闭防火墙 shutdown是关闭系统poweroff是关闭系统的同时还关掉电源","categories":[],"tags":[{"name":"live2","slug":"live2","permalink":"http://example.com/tags/live2/"}]},{"title":"Markdown基本语法","slug":"Markdown基本语法","date":"2022-03-05T04:31:11.000Z","updated":"2022-03-17T13:45:18.885Z","comments":true,"path":"2022/03/05/Markdown基本语法/","link":"","permalink":"http://example.com/2022/03/05/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Markdown基本语法Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。 Markdown 编写的文档后缀为 .md, .markdown。 Markdown 应用Markdown 能被使用来撰写电子书，如：Gitbook。 当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。 优点：1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可 缺点：1、需要记一些语法（很简单，五分钟学会）。2、有些平台不支持Markdown编辑模式。 1开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器 编辑器Typora、VScode、wolai等软件均支持markdown语法，本文在Typora上编写。 Markdown标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：标准语法一般在#后跟个空格再写文字。 示例： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题 Markdown字体 加粗 要加粗的文字左右分别用两个*号包起来 斜体 要倾斜的文字左右分别用一个*号包起来 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 删除线 要加删除线的文字左右分别用两个~~号包起来 示例： 1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 效果如下： 这是加粗的文字这是倾斜的文字*这是斜体加粗的文字*这是加删除线的文字 Markdown区块在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个… 示例： 123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 效果如下： 这是引用的内容 这是引用的内容 这是引用的内容 Markdown分割线三个或者三个以上的 - 或者 * 都可以。 示例： 1234-------******** 效果如下：可以看到，显示效果是一样的。 Markdown图片语法： 1234![图片alt](图片地址 &#x27;&#x27;图片title&#x27;&#x27;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 示例： 12![blockchain](https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg &quot;区块链&quot;) 效果如下： 上传本地图片直接点击导航栏的图片标志，选择图片即可 markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。 Markdown超链接语法： 12[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加 示例： 12[知乎](http://zhihu.com)[百度](http://baidu.com) 效果如下： 知乎百度 注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替。 1234&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例&lt;a href=&quot;https://www.baidu.com&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt; Markdown列表无序列表语法：无序列表用 - + * 任何一种都可以 12345- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 效果如下： 列表内容 列表内容 列表内容 有序列表语法：数字加点 123451. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格 效果如下： 列表内容 列表内容 列表内容 列表嵌套上一级和下一级之间敲三个空格即可 一级无序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级无序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 一级有序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级有序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 Markdown表格语法： 1234567891011表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 示例： 12345姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 效果如下： 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 这里有一个网站可以一键生成表格 https://www.tablesgenerator.com/markdown_tables Markdown代码语法：单行代码：代码之间分别用一个反引号包起来 1`代码内容` 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 12345(```) 代码... 代码... 代码...(```) 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 示例： 单行代码 1`create database hero;` 代码块 123456(```) function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;; &#125; fun();(```) 效果如下： 单行代码 1create database hero; 代码块 1234function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun(); Markdown流程图123456789```flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;``` 效果如下： Markdown 其他技巧支持HTML 元素不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等 ，如： 1使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑 公式Markdown Preview Enhanced 使用 KaTeX 或者 MathJax 来渲染数学表达式。 KaTeX 拥有比 MathJax 更快的性能，但是它却少了很多 MathJax 拥有的特性。你可以查看 KaTeX supported functions/symbols 来了解 KaTeX 支持那些符号和函数。 默认下的分隔符： $...$ 或者 \\(...\\) 中的数学表达式将会在行内显示。 $$...$$ 或者 \\[...\\] 或者 ````math` 中的数学表达式将会在块内显示。 12345678910111213$$\\begin&#123;Bmatrix&#125; a &amp; b \\\\ c &amp; d\\end&#123;Bmatrix&#125;$$$$\\begin&#123;CD&#125; A @&gt;a&gt;&gt; B \\\\@VbVV @AAcA \\\\ C @= D\\end&#123;CD&#125;$$ 输出结果为：","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"}]},{"title":"CentOS7启动与切换图形界面","slug":"CentOS7启动与切换图形界面","date":"2022-03-02T14:25:40.000Z","updated":"2022-03-02T14:34:29.236Z","comments":true,"path":"2022/03/02/CentOS7启动与切换图形界面/","link":"","permalink":"http://example.com/2022/03/02/CentOS7%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%88%87%E6%8D%A2%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/","excerpt":"","text":"Cent OS 7 启动与切换图形界面安装图形界面默认情况下是不会安装图形界面的，所以需要自己手动安装，步骤如下： 开启系统，以root身份进入 安装X(X Window System)，命令如下： 1yum groupinstall &quot;X Window System&quot; 其中大约有200多个软件，安装完成会出现complete！字样。然后安装图形界面软件，命令如下： 1yum groupinstall &quot;GNOME Desktop&quot; 由于这个软件组比第一个要大很多（包含800个左右的软件），安装过程会比较慢。安装完成会出现complete！字样。 安装完成后我们可以通过命令 startx 进入图形界面 开机启动图形化界面 首先使用ctrl+alt+f2切换到命令行模式，如果本身就是命令行模式就直接看下面的步骤 然后输入如下命令，查看当前开机启动模式 1systemctl get-default graphical.target代表开机时启动图形化界面multi-user.target代表开机时启动dos界面 最后输入如下命令设置开机启动图形界面 1systemctl set-default graphical.target 同理，如果想开机启动dos界面，就输入如下命令 1systemctl set-default multi-user.target dos界面与图形化界面切换快捷键图形到dos：ctrl+alt+f2dos到图形：输入startx或者在命令上输入 init 3 命令 切换到dos界面输入 init 5命令 切换到图形界面","categories":[],"tags":[{"name":"centOS","slug":"centOS","permalink":"http://example.com/tags/centOS/"},{"name":"教程","slug":"教程","permalink":"http://example.com/tags/%E6%95%99%E7%A8%8B/"}]},{"title":"Hello World","slug":"Hello World","date":"2022-01-06T02:42:00.000Z","updated":"2022-03-05T04:38:08.870Z","comments":true,"path":"2022/01/06/Hello World/","link":"","permalink":"http://example.com/2022/01/06/Hello%20World/","excerpt":"","text":"Hello WorldWelcome to Hexo! This is your very first post. 这里是Args建立的第一个个人博客 20计算机科学与技术三班张吉涛 Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"live2","slug":"live2","permalink":"http://example.com/tags/live2/"},{"name":"Markdown","slug":"Markdown","permalink":"http://example.com/tags/Markdown/"},{"name":"centOS","slug":"centOS","permalink":"http://example.com/tags/centOS/"},{"name":"教程","slug":"教程","permalink":"http://example.com/tags/%E6%95%99%E7%A8%8B/"}]}